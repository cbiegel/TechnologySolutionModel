/**
 */
package org.emftrace.metamodel.QUARCModel.Query.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.emftrace.metamodel.QUARCModel.Query.util.QueryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QueryItemProviderAdapterFactory extends QueryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QueryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.GSSQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GSSQueryItemProvider gssQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.GSSQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGSSQueryAdapter() {
		if (gssQueryItemProvider == null) {
			gssQueryItemProvider = new GSSQueryItemProvider(this);
		}

		return gssQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.GSSQueryContainment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GSSQueryContainmentItemProvider gssQueryContainmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.GSSQueryContainment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGSSQueryContainmentAdapter() {
		if (gssQueryContainmentItemProvider == null) {
			gssQueryContainmentItemProvider = new GSSQueryContainmentItemProvider(this);
		}

		return gssQueryContainmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.QueryResultSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryResultSetItemProvider queryResultSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.QueryResultSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryResultSetAdapter() {
		if (queryResultSetItemProvider == null) {
			queryResultSetItemProvider = new QueryResultSetItemProvider(this);
		}

		return queryResultSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.ApplicableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicableElementItemProvider applicableElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.ApplicableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicableElementAdapter() {
		if (applicableElementItemProvider == null) {
			applicableElementItemProvider = new ApplicableElementItemProvider(this);
		}

		return applicableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.Rating} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RatingItemProvider ratingItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.Rating}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRatingAdapter() {
		if (ratingItemProvider == null) {
			ratingItemProvider = new RatingItemProvider(this);
		}

		return ratingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.SelectedGoalsSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectedGoalsSetItemProvider selectedGoalsSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.SelectedGoalsSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectedGoalsSetAdapter() {
		if (selectedGoalsSetItemProvider == null) {
			selectedGoalsSetItemProvider = new SelectedGoalsSetItemProvider(this);
		}

		return selectedGoalsSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.AssignedConstraintsSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignedConstraintsSetItemProvider assignedConstraintsSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.AssignedConstraintsSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignedConstraintsSetAdapter() {
		if (assignedConstraintsSetItemProvider == null) {
			assignedConstraintsSetItemProvider = new AssignedConstraintsSetItemProvider(this);
		}

		return assignedConstraintsSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.PrioritizedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrioritizedElementItemProvider prioritizedElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.PrioritizedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrioritizedElementAdapter() {
		if (prioritizedElementItemProvider == null) {
			prioritizedElementItemProvider = new PrioritizedElementItemProvider(this);
		}

		return prioritizedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.SelectedPrinciplesSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectedPrinciplesSetItemProvider selectedPrinciplesSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.SelectedPrinciplesSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectedPrinciplesSetAdapter() {
		if (selectedPrinciplesSetItemProvider == null) {
			selectedPrinciplesSetItemProvider = new SelectedPrinciplesSetItemProvider(this);
		}

		return selectedPrinciplesSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.PrioritizedDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrioritizedDecompositionItemProvider prioritizedDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.PrioritizedDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrioritizedDecompositionAdapter() {
		if (prioritizedDecompositionItemProvider == null) {
			prioritizedDecompositionItemProvider = new PrioritizedDecompositionItemProvider(this);
		}

		return prioritizedDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftrace.metamodel.QUARCModel.Query.SelectedGoalsPriorities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectedGoalsPrioritiesItemProvider selectedGoalsPrioritiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftrace.metamodel.QUARCModel.Query.SelectedGoalsPriorities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectedGoalsPrioritiesAdapter() {
		if (selectedGoalsPrioritiesItemProvider == null) {
			selectedGoalsPrioritiesItemProvider = new SelectedGoalsPrioritiesItemProvider(this);
		}

		return selectedGoalsPrioritiesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gssQueryItemProvider != null) gssQueryItemProvider.dispose();
		if (gssQueryContainmentItemProvider != null) gssQueryContainmentItemProvider.dispose();
		if (queryResultSetItemProvider != null) queryResultSetItemProvider.dispose();
		if (applicableElementItemProvider != null) applicableElementItemProvider.dispose();
		if (ratingItemProvider != null) ratingItemProvider.dispose();
		if (selectedGoalsSetItemProvider != null) selectedGoalsSetItemProvider.dispose();
		if (assignedConstraintsSetItemProvider != null) assignedConstraintsSetItemProvider.dispose();
		if (prioritizedElementItemProvider != null) prioritizedElementItemProvider.dispose();
		if (selectedPrinciplesSetItemProvider != null) selectedPrinciplesSetItemProvider.dispose();
		if (prioritizedDecompositionItemProvider != null) prioritizedDecompositionItemProvider.dispose();
		if (selectedGoalsPrioritiesItemProvider != null) selectedGoalsPrioritiesItemProvider.dispose();
	}

}
